@page "/ProfileEdit"

@using System;
@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;
@using System.Linq;
@using System.Threading.Tasks;
@using BugTrackBlazorServerUI.Areas.Identity.Models;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using BugTrackBlazorServerUI.Data;

@inject UserManager<ApplicationUser> _userManager
@inject SignInManager<ApplicationUser> _signInManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavManager
@inject BugTrackBlazorServerUIContext _context

<EditForm Model="@editModel" OnValidSubmit="OnValidSubmit">
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Display name"
                            @bind-Value="editModel.DisplayName" For="@(() => editModel.DisplayName)" />                    
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private class EditModel
    {
        [Required]
        public string DisplayName { get; set; }
    }

    private ApplicationUser user { get; set; }
    private AuthenticationState authState { get; set; }
    private EditModel editModel { get; set; } = new EditModel();

    //private async Task LoadAsync(ApplicationUser user)
    //{
    //    var userName = await _userManager.GetUserNameAsync(user);
    //    var phoneNumber = await _userManager.GetPhoneNumberAsync(user);
    //}

    //public async Task<IActionResult> OnGetAsync()
    //{
    //    var user = await _userManager.GetUserAsync(User);
    //    if (user == null)
    //    {
    //        return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
    //    }

    //    await LoadAsync(user);
    //    return Page();
    //}

    public async Task OnValidSubmit()
    {
        
        // update user info
        user.DisplayName = editModel.DisplayName;

        // This is the part that doesn't work
        var result = await _userManager.UpdateAsync(user);

        // However, it always succeeds inspite of not updating the database
        if (!result.Succeeded)
        {
            // error case
            return;
        }

        await _context.SaveChangesAsync();

        await _signInManager.RefreshSignInAsync(user);

        NavManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        user = await _userManager.GetUserAsync(authState.User);
        editModel = new EditModel { DisplayName = user.DisplayName };
    }
}
