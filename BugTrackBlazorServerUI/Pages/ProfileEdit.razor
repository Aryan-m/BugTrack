@page "/ProfileEdit"

@using System;
@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;
@using System.Linq;
@using System.Threading.Tasks;
@using BugTrackBlazorServerUI.Areas.Identity.Models;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using BugTrackBlazorServerUI.Data;

@inject UserManager<ApplicationUser> _userManager
@inject SignInManager<ApplicationUser> _signInManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavManager
@inject BugTrackBlazorServerUIContext _context

<EditForm Model="@editModel" OnValidSubmit="OnValidSubmit">
    <MudCard>
        <MudCardContent>
            <ul class="app-error-list ml-3 mb-3">
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
            <MudTextField Label="Display name"
                          @bind-Value="editModel.DisplayName" For="@(() => editModel.DisplayName)" />
            <label class="mud-input-label
                          mud-input-label-animated
                          mud-input-label-text
                          mt-2">
                Profile picture:
            </label>
            <div>
                <FileUploadSingle onFileUpload="@((imgFile) => saveUploadedFile(imgFile))" uploadedFile="imageFile" />
            </div>
        </MudCardContent>
        <MudCardActions>
            @*<MudIconButton  OnClick="@(() => NavManager.NavigateTo("/"))" Color="Color.Primary" Class="ml-auto">Cancel</MudIconButton>*@
            <MudIconButton Icon="@Icons.Filled.Save" Color="@Color.Dark" ButtonType="ButtonType.Submit" Class="ml-auto">Register</MudIconButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private class EditModel
    {
        [Required]
        public string DisplayName { get; set; }
    }

    private ApplicationUser user { get; set; }
    private AuthenticationState authState { get; set; }
    private EditModel editModel { get; set; } = new EditModel();
    private List<string> errors { get; set; } = new List<string>();
    private ImageFileModel imageFile;

    // event callback sent to fileUploadSingle component to save uploaded files
    protected void saveUploadedFile(ImageFileModel imgFile)
    {
        imageFile = imgFile;
    }


    public async Task OnValidSubmit()
    {
        errors.Clear();

        // update user info
        user.DisplayName = editModel.DisplayName;

        List<ApplicationUser> usersWithSameDisplayName = _context.Users.Where(user => user.DisplayName == editModel.DisplayName).ToList();
        if (usersWithSameDisplayName.Count >= 2
            ||
            (  usersWithSameDisplayName.Count == 1
            && usersWithSameDisplayName.First().Email != user.Email)
        ){

            errors.Add("Display name taken! Please choose a different name.");
            return;
        }

        var result = await _userManager.UpdateAsync(user);

        // However, it always succeeds inspite of not updating the database
        if (!result.Succeeded)
        {
            // error case
            return;
        }

        await _context.SaveChangesAsync();

        NavManager.NavigateTo("/", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        user = await _userManager.GetUserAsync(authState.User);
        editModel = new EditModel { DisplayName = user.DisplayName };
    }
}
