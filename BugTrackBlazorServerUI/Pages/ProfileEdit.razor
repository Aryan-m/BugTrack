@page "/ProfileEdit"

@using System;
@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;
@using System.Linq;
@using System.Threading.Tasks;
@using BugTrackBlazorServerUI.Areas.Identity.Models;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using BugTrackBlazorServerUI.Data;

@inject UserManager<ApplicationUser> _userManager
@inject SignInManager<ApplicationUser> _signInManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavManager
@inject BugTrackBlazorServerUIContext _context
@inject IDialogService Dialog


<EditForm Model="@editModel" OnValidSubmit="OnValidSubmit">
    <MudCard>
        <MudCardContent>
            <ul class="app-error-list ml-3 mb-3">
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
            <MudTextField Label="Display name"
                          @bind-Value="editModel.DisplayName" For="@(() => editModel.DisplayName)" />
            <label class="mud-input-label
                          mud-input-label-animated
                          mud-input-label-text
                          mt-2">
                Profile picture:
            </label>
            <div>
                @if (!String.IsNullOrEmpty(editModel.ImgDataBase64))
                {
                    <button type="button" @onclick="launchEditProfileImgDialog">
                        <img src="@editModel.ImgDataBase64"
                             class="rounded-circle"
                             width="50"
                             height="50" />
                    </button>
                }
                <InputFile id="profileImg" OnChange="OnInputFileChanged" class="mud-file-input" accept=".jpg, .jpeg, .png" />
                <MudIconButton Icon="@Icons.Filled.CloudUpload"
                               Style="@($"color:{Colors.Indigo.Darken2};")"
                               ButtonType="ButtonType.Button"
                               Class="ml-auto"
                               HtmlTag="label"
                               for="profileImg">
                    Upload Picture
                </MudIconButton>
            </div>
        </MudCardContent>
        <MudCardActions>
            @*<MudIconButton  OnClick="@(() => NavManager.NavigateTo("/"))" Color="Color.Primary" Class="ml-auto">Cancel</MudIconButton>*@
            <MudIconButton Icon="@Icons.Filled.Save" Color="@Color.Dark" ButtonType="ButtonType.Submit" Class="ml-auto">Register</MudIconButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private class EditModel
    {
        [Required]
        public string DisplayName { get; set; }
        public byte[] ImgDataBytes { get; set; }
        public string ImgDataBase64 { get; set; }
    }

    private ApplicationUser user { get; set; }
    private AuthenticationState authState { get; set; }
    private EditModel editModel { get; set; } = new EditModel();
    private List<string> errors { get; set; } = new List<string>();

    // event callback sent to fileUploadSingle component to save uploaded files
    protected void saveUploadedFile(ImageFileModel imgFile)
    {
        editModel.ImgDataBytes = imgFile.ImgDataBytes;
        editModel.ImgDataBase64 = imgFile.ImgDataBase64;
    }

    private async Task OnInputFileChanged(IFileListEntry[] files)
    {
        var fileName = files.FirstOrDefault().Name;

        using (var ms = new MemoryStream())
        {

            await files[0].Data.CopyToAsync(ms);

            // invoke eventCallback
            saveUploadedFile(new ImageFileModel(
                                0
                            , fileName
                            , ms.ToArray()
                            , "data:image/jpg;base64," + Convert.ToBase64String(ms.ToArray())
                        ));
        }
    }

    private async Task launchEditProfileImgDialog()
    {
        var dialog = Dialog.Show<ProfileImgEdit>("Profile Picture"
                                  , new DialogParameters { ["ImgSrc"] = editModel.ImgDataBase64 }
                                  , new DialogOptions() { DisableBackdropClick = true }
                                  );

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            editModel.ImgDataBase64 = null;
            editModel.ImgDataBytes = null;
        }
    }

    public async Task OnValidSubmit()
    {
        errors.Clear();

        // update user info
        user.DisplayName = editModel.DisplayName;
        user.ImgDataBytes = editModel.ImgDataBytes;
        user.ImgDataBase64 = editModel.ImgDataBase64;

        List<ApplicationUser> usersWithSameDisplayName = _context.Users.Where(user => user.DisplayName == editModel.DisplayName).ToList();
        if (usersWithSameDisplayName.Count >= 2
            ||
            (usersWithSameDisplayName.Count == 1
            && usersWithSameDisplayName.First().Email != user.Email)
        )
        {

            errors.Add("Display name taken! Please choose a different name.");
            return;
        }

        var result = await _userManager.UpdateAsync(user);

        // However, it always succeeds inspite of not updating the database
        if (!result.Succeeded)
        {
            // error case
            return;
        }

        await _context.SaveChangesAsync();

        NavManager.NavigateTo("/", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        user = await _userManager.GetUserAsync(authState.User);
        editModel = new EditModel
        {
            DisplayName = user.DisplayName
        ,
            ImgDataBytes = user.ImgDataBytes
        ,
            ImgDataBase64 = user.ImgDataBase64
        };
    }
}
